# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      #- uses: actions/checkout@v2
      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          DATE=$(date +%F_%H-%M)
          ID="automate-click";
          echo "ARTNAME=$ID" >> $GITHUB_ENV;
          echo "DATE=$DATE" >> $GITHUB_ENV;
          BRANCH="master";
          MISSING_REQ=0;
          for req in mktemp wget unzip zip grep cut date;do
            type $req >/dev/null 2>&1 || { echo >&2 "Missing dependency: $req"; MISSING_REQ=1; }
          done
          [ $MISSING_REQ -ne 0 ] && { echo "Aborting because of missing dependency"; exit 1; }
          ZIPFILE=$(mktemp);
          EXTRDIR=$(mktemp -d);
          wget -q --show-progress "https://github.com/igorlogius/$ID/archive/$BRANCH.zip" -O $ZIPFILE;
          unzip -j $ZIPFILE -d $EXTRDIR -x "*/README" "*/example_config.json";
          XPI="$ID-$(grep '"version"' $EXTRDIR/manifest.json |cut -d'"' -f4)-$DATE.xpi";
          echo $XPI;
          zip -X -j $XPI $EXTRDIR/*;
        
      - name: create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          tag_name: ${{env.DATE}}_${{env.ARTNAME}}
          release_name: ${{env.DATE}}_${{env.ARTNAME}}
          draft: false
          prerelease: false
          
      - name: upload release asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          # pulls from CREATE RELEASE step, refs it's ID to get its outputs, which include `upload_url`.
          # ref: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          upload_url: ${{ steps.create_release.outputs.upload_url }}           
          asset_path: ./${{env.ARTNAME}}
          asset_name:  ${{env.ARTNAME}}
          asset_content_type: application/zip  

          
          
